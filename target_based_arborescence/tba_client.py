from mpls_fwd_gen import MPLS_Client, oFEC
from find_arborescences import find_arborescences

class TargetBasedArborescence(MPLS_Client):
    def __init__(self):
        self.lsps: dict[str, tuple[str, str]] = {}
        self.arborescences: dict[str, list[list[tuple[str, str]]]]



    # Abstract functions to be implemented by each client subclass.
    def LFIB_compute_entry(self, fec: oFEC, single=False):
        fec.value
        pass

    def define_lsp(self, tailend: str, tunnel_local_id = 0, weight='weight', protection = None, **kwargs):
        self.lsps[f"{len(self.lsps.items())}_{self.router.name}_to_{tailend}"] = (self.router.name, tailend)

        self.arborescences = find_arborescences(self.router.network, self.router.name, tailend)


    def LFIB_refine(self, label):
        # Some process might require a refinement of the LFIB.
        pass

    def known_resources(self):
        # Returns a generator to iterate over all resources managed by the client.
        # Each client must provide an implementation.
        pass

    def self_sourced(self, FEC):
        # Returns True if the FEC is sourced or generated by this process.
        pass
